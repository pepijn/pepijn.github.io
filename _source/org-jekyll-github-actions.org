#+OPTIONS: toc:nil
#+PROPERTY: header-args :dir /tmp
#+BEGIN_EXPORT html
---
layout:     post
title:      Exporting Org-mode with Babel blocks from Outside Emacs
tags:       org-mode jekyll github-actions
---
#+END_EXPORT

The reproducibility in my blog wasn't as good as it could be: I committed both the source files (in Org-mode) as the export (in Markdown) to source control.
Better for reproducibility is to regenerate the Markdown file with every build of my blog.
You need to be able to call Emacs and export Org-mode files in a script for that.
There are some intricacies on how to achieve this related to calling Emacs from the command line and exporting Org-mode with babel source code blocks.
This post is to inspire those who want to do the same or got stuck trying.

* Motivation

First of all, there are different approaches to this problem.
One alternative is to generate your whole website from Org-mode, as described in [[https://duncan.codes/posts/2019-09-03-migrating-from-jekyll-to-org/][this post]].
But I picked the approach in this post because of two reasons:

- I don't want to invest much time in learning Emacs Lisp because I spend most of my time coding in IntelliJ.
- I like to keep using [[https://jekyllrb.com/][Jekyll]] because of the plugins and themes (which requires me to export to Markdown).


* Hello, world!

First, we need to call Emacs from the command-line, without launching a GUI.
Let's find the appropriate option in the manual:

#+NAME: doc
#+BEGIN_SRC bash :results verbatim :exports both
emacs --help | grep -C 3 script
#+END_SRC

It seems that we can pass an Emacs Lisp script using =--script=:

#+RESULTS: doc
: --quick, -Q                 equivalent to:
:                               -q --no-site-file --no-site-lisp --no-splash
:                               --no-x-resources
: --script FILE               run FILE as an Emacs Lisp script
: --terminal, -t DEVICE       use DEVICE for terminal I/O
: --user, -u USER             load ~USER/.emacs instead of your own
: 

#+NAME: path

Now, we need a file to pass to the option.
Let's write an Emacs Lisp script that prints "Hello world!" to disk, using Emacs Lisp:

#+NAME: hello-world-code
#+BEGIN_SRC emacs-lisp :exports both :results code
(let ((path   "hello_printer.el")
      (script '(let ((greeting (car argv)))
                 (princ (concat "Hello " greeting)))))
  (with-temp-file path (insert (prin1-to-string script)))
  script)
#+END_SRC

Double-nchecking the contents of the file:

#+RESULTS: hello-world-code
#+BEGIN_SRC emacs-lisp
(let
    ((greeting
      (car argv)))
  (princ
   (concat "Hello " greeting)))
#+END_SRC

Next, we call the script with Emacs:

#+NAME: print-hello-world
#+BEGIN_SRC bash :exports both :exports both
                                # â†“ first argument in argv
emacs --script hello_printer.el world!
#+END_SRC

It's working! The output is:

#+RESULTS: print-hello-world
: Hello world!

By the way, when using =--script=, Emacs doesn't load your init file.
Fast startup and good for reproducibility!

* First Org-mode to Markdown export

We are now going to export an Org-mode file to Markdown from the command-line.

#+BEGIN_SRC org 
Hello
#+END_SRC

* Conclusion

Being able to export the Org-mode files to Markdown opens the road to various possibilities.
For example, with the relatively new GitHub Actions, I figured that it should be possible to export the Markdown files in a continuous delivery pipeline, after pushing to the repo.
