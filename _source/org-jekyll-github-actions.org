#+OPTIONS: toc:nil
#+PROPERTY: header-args :dir ../_posts
#+BEGIN_EXPORT html
---
layout:     post
title:      Exporting Org-mode with Babel blocks from Outside Emacs
tags:       org-mode jekyll github-actions
---
#+END_EXPORT

The reproducibility in my blog wasn't as good as it could be: I committed both the source files (in Org-mode) as the export (in Markdown) to source control.
Better for reproducibility is to regenerate the Markdown file with every build of my blog.
You need to be able to call Emacs and export Org-mode files in a script for that.
There are some intricacies on how to achieve this related to calling Emacs from the command line and exporting Org-mode with babel source code blocks.
This post is to inspire those who want to do the same or got stuck trying.

I'll focus on how to interact with Emacs when using command-line scripting because it might not be completely obvious.

* Motivation

First of all, there are different approaches to this problem.
One alternative is to generate your whole website from Org-mode, as described in [[https://duncan.codes/posts/2019-09-03-migrating-from-jekyll-to-org/][this post]].
But I picked the approach in this post because of two reasons:

- I don't want to invest much time in learning Emacs Lisp because I spend most of my time coding in IntelliJ.
- I like to keep using [[https://jekyllrb.com/][Jekyll]] because of the plugins and themes (which requires me to export to Markdown).

In the rest of the post I'll switch back and forth between Bash and Emacs Lisp code snippets.
Bash is marked by the =$= sign at the beginning of the line.
You can find the source code here: link to blog.

* Emacs Scripting Primer: Hello World!

First, we need to call Emacs from the command-line, without launching a GUI.
Let's find the appropriate option in the manual:

#+NAME: sh-help
#+BEGIN_EXAMPLE bash
$ emacs --help | grep -C 3 script
#+END_EXAMPLE

#+NAME: run-shell
#+BEGIN_SRC emacs-lisp :var s=sh-help :exports results
(thread-last s
  (replace-regexp-in-string "emacs" "/usr/local/bin/emacs")
  (replace-regexp-in-string "\\$ " "")
  (shell-command-to-string))
#+END_SRC

It seems that we can pass an Emacs Lisp script using =--script=:

#+RESULTS: run-shell
: --quick, -Q                 equivalent to:
:                               -q --no-site-file --no-site-lisp --no-splash
:                               --no-x-resources
: --script FILE               run FILE as an Emacs Lisp script
: --terminal, -t DEVICE       use DEVICE for terminal I/O
: --user, -u USER             load ~USER/.emacs instead of your own
: 

Now, we need a file to pass to the option.
Let's write an Emacs Lisp script that prints a greeting to disk, using Emacs Lisp:

#+NAME: hello-world-code
#+BEGIN_EXAMPLE emacs-lisp
;; greeting.el

(require 'seq)

(seq-let [first second] argv
  (princ (concat "Greeting: " first " " second)))
#+END_EXAMPLE

#+NAME: save-to-disk
#+BEGIN_SRC emacs-lisp :var f=hello-world-code :exports results :results none
(with-temp-buffer
  (insert f)
  (goto-char (point-min))
  (forward-to-word 1)
  (kill-line)
  (write-file (car kill-ring)))
#+END_SRC

Next, we call the greeting script with Emacs and two greetings:

#+NAME: print-hello-world
#+BEGIN_EXAMPLE bash
$ emacs --script "greeting.el" "Hello" "world!"
#+END_EXAMPLE

#+NAME: el5
#+CALL: run-shell(s=print-hello-world)

It's working! The output is:

#+RESULTS: el5
: Greeting: Hello world!

By the way, when using =--script=, Emacs doesn't load your init file.
Fast startup and good for reproducibility!

* First Org-mode to Markdown export

We are now going to export an Org-mode file to Markdown from the command-line.
We'll save an example file to our working directory.

#+NAME: org-example
#+BEGIN_EXAMPLE org
# example.org

#+OPTIONS: toc:nil

This is an Org-mode paragraph.

Another paragraph with a [[https://example.com][link]].
And text in =monospace=.
#+END_EXAMPLE

#+CALL: save-to-disk(f=org-example)

Great. The only thing we need now is a script to convert the Org-mode to Markdown.

#+NAME: el2
#+BEGIN_EXAMPLE emacs-lisp
;; md-export.el

(require 'seq)
(require 'org)

(seq-let [input output] argv
  (with-temp-buffer
    (insert-file-contents input)
    (org-md-export-as-markdown)
    (write-file output)))
#+END_EXAMPLE

#+CALL: save-to-disk(f=el2)

Let's run it:

#+NAME: sh3
#+BEGIN_EXAMPLE bash
$ emacs --script "md-export.el" \
        "example.org" \
        "example.md"

$ cat "example.md"
#+END_EXAMPLE

#+NAME: shexec3
#+CALL: run-shell(s=sh3)

Here's the output:

#+RESULTS: shexec3
: This is an Org-mode paragraph.
: 
: Another paragraph with a [link](https://example.com).
: And text in `monospace`.
: 


* Caveats

** Don't evaluate on exporting

Normally Org-mode evaluates all babel blocks on exporting.
Should you find yourself in a situation where you don't want this anymore, then you can use a property to disable it:

#+BEGIN_EXAMPLE org
#+PROPERTY: header-args :eval no-export
#+END_EXAMPLE

** Overriding Markdow
You can override Markdown export functions if you're unhappy with the defaults:

* Conclusion

Being able to export the Org-mode files to Markdown opens the road to various possibilities.
For example, with the relatively new GitHub Actions, I figured that it should be possible to export the Markdown files in a continuous delivery pipeline, after pushing to the repo.
