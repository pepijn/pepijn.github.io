#+OPTIONS: toc:nil
#+PROPERTY: header-args :dir /tmp
#+BEGIN_EXPORT html
---
layout:     post
title:      How to Export Org-mode from the Command-Line
tags:       org-mode jekyll github-actions
---
#+END_EXPORT

Reproducible Org-mode files prove to the reader of your document that the code inside it works.
But, for your Org-mode file to be reproducible, the environment that it runs inside of should be as well.
The chain is as strong as its weakest link.

#+BEGIN_QUOTE
Literate programming is what you need to rise above the ordinary level of achievement. -- [[https://www.informit.com/articles/article.aspx?p=1193856][Donald Knuth]]
#+END_QUOTE

Exporting Org-mode from the command-line enables you to integrate reproducible literal programming.

The reproducibility in my blog wasn't as good as it could be. 
I committed both the source files (in Org-mode) as the export (in Markdown) to source control for reproducibility is to regenerate the Markdown file with every build of my blog.
You need to be able to call Emacs and export Org-mode files in a script for that.
There are some intricacies on how to achieve this related to calling Emacs from the command line and exporting Org-mode with babel source code blocks.
This post is to inspire those who want to do the same or got stuck trying.

I'll focus on how to interact with Emacs when using command-line scripting because it's not straightforward.

* Alternative Solutions

A small disclaimer before we start: there are different approaches to this problem.
You might prefer to generate your whole website from Org-mode, as described in [[https://duncan.codes/posts/2019-09-03-migrating-from-jekyll-to-org/][this post]].
I'm not ready for that yet, because:

- I don't want to invest much time in learning Emacs Lisp because I spend most of my time in IntelliJ.
- I like to keep using [[https://jekyllrb.com/][Jekyll]] because of the plugins and themes (which requires me to export to Markdown).

* The Code

In the rest of this post, I'll switch back and forth between Bash and Emacs Lisp code snippets.
Bash is marked by the =$= at the beginning of each line.
Emacs Lisp are the lispy looking code blocks.

Meta alert: this post itself is subject to the exporting process described in the post.
You can find the source code here: link to blog.

** Emacs Scripting Primer: Hello World!

First, we need to call Emacs from the command-line, without launching a GUI.
Let's find the appropriate option in the manual:

#+NAME: sh-help
#+BEGIN_EXAMPLE bash
$ emacs --help | grep -C 3 script
#+END_EXAMPLE

#+NAME: run-shell
#+BEGIN_SRC emacs-lisp :var s=sh-help :exports results
(thread-last s
  (replace-regexp-in-string "\\$ " "")
  (shell-command-to-string))
#+END_SRC

It seems that we can pass an Emacs Lisp script using =--script=:

#+RESULTS: run-shell
: --quick, -Q                 equivalent to:
:                               -q --no-site-file --no-site-lisp --no-splash
:                               --no-x-resources
: --script FILE               run FILE as an Emacs Lisp script
: --terminal, -t DEVICE       use DEVICE for terminal I/O
: --user, -u USER             load ~USER/.emacs instead of your own
: 

Now, just need the ~FILE~.
Let's write an Emacs Lisp script that prints a greeting to disk, using Emacs Lisp:

#+NAME: hello-world-code
#+BEGIN_EXAMPLE emacs-lisp
;; greeting.el

(require 'seq)

(seq-let [first second] argv
  (princ (concat "Greeting: " first " " second)))
#+END_EXAMPLE

#+NAME: save-to-disk
#+BEGIN_SRC emacs-lisp :var f=hello-world-code :exports results :results none
(with-temp-buffer
  (insert f)
  (goto-char (point-min))
  (forward-to-word 1)
  (kill-line)
  (write-file (car kill-ring)))
#+END_SRC

Next, we call the greeting script with Emacs and two greetings:

#+NAME: print-hello-world
#+BEGIN_EXAMPLE bash
$ emacs --script "greeting.el" "Hello" "world!"
#+END_EXAMPLE

#+NAME: el5
#+CALL: run-shell(s=print-hello-world)

It's working! The output is:

#+RESULTS: el5
: Greeting: Hello world!

By the way, when using =--script=, Emacs doesn't load your init file.
Fast startup and good for reproducibility!

** Exporting Org-mode to Markdown

Now that we know the basis of Emacs scripting, we are ready to enter our real challenge.
We'll be working with the following Org-mode example file:

#+NAME: org-example
#+BEGIN_EXAMPLE org
# example.org

#+OPTIONS: toc:nil

This is an Org-mode paragraph.

Another paragraph with a [[https://example.com][link]].
And text in =monospace=.
#+END_EXAMPLE

#+CALL: save-to-disk(f=org-example)

Great. The only thing we need now is a script to convert the Org-mode to Markdown.
The ~org-md-export-as-markdown~ is obviously where the magic happens:

#+NAME: el2
#+BEGIN_EXAMPLE emacs-lisp
;; md-export.el

(require 'seq)
(require 'org)

(seq-let [input output] argv
  (with-temp-buffer
    (insert-file-contents input)
    (org-md-export-as-markdown)
    (write-file output)))
#+END_EXAMPLE

#+CALL: save-to-disk(f=el2)

Let's run it:

#+NAME: sh3
#+BEGIN_EXAMPLE bash
$ emacs --script "md-export.el" \
        "example.org" \
        "example.md"

$ cat "example.md"
#+END_EXAMPLE

#+NAME: shexec3
#+CALL: run-shell(s=sh3)

Here's the output---with Markdown syntax. Great success!

#+RESULTS: shexec3
: This is an Org-mode paragraph.
: 
: Another paragraph with a [link](https://example.com).
: And text in `monospace`.
: 


* Caveats

** Tilde Files in Directory

Emacs automatically creates backup files by suffixing them with a =~=, like =example.md~=.
In our context of exporting, the files are unnecessary and distracting.

To disable them, simply add the following to your script:

#+BEGIN_EXAMPLE emacs-lisp
(setq make-backup-files nil)
#+END_EXAMPLE

** Giving Permission to Evaluate
** Exporting Irreproducible Org-mode File

By default, Org-mode evaluates all babel blocks on exporting.
Should you find yourself in a situation where you don't want this anymore, then you can use a property to disable it:

#+BEGIN_EXAMPLE org
#+PROPERTY: header-args :eval no-export
#+END_EXAMPLE

** Customizing Markdown Export
You can override Markdown export functions if you're unhappy with the defaults:

** Evaluating all Babel cells before exporting

Especially with :results none :exports none.
I'm using this 'trick': ~:exports results :results none~


* Conclusion

Being able to export the Org-mode files to Markdown opens the road to various possibilities.
For example, with the relatively new GitHub Actions, I figured that it should be possible to export the Markdown files in a continuous delivery pipeline, after pushing to the repo.

* Appendix

Emacs version:

#+BEGIN_SRC bash :results verbatim :exports results
emacs --version
#+END_SRC

#+RESULTS:
: GNU Emacs 26.2
: Copyright (C) 2019 Free Software Foundation, Inc.
: GNU Emacs comes with ABSOLUTELY NO WARRANTY.
: You may redistribute copies of GNU Emacs
: under the terms of the GNU General Public License.
: For more information about these matters, see the file named COPYING.

 Org-mode version:

#+BEGIN_SRC emacs-lisp :exports results
(org-version)
#+END_SRC

#+RESULTS:
: 9.1.3
